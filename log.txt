

***** Dumping source config file /config/envoy.yaml *****

static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains:
                        # Adding both front proxy and API domains for now
                        ["$API_PUBLIC_HOST"]
                      routes:
                        - match: {prefix: "/album/"}
                          route: {
                              cluster: album-service,
                              prefix_rewrite: "/",
                              # TODO: Reduce time out value
                              timeout: 60s,
                            }
                        - match: {prefix: "/image/"}
                          route:
                            {
                              cluster: image-detection-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match: {prefix: "/file/"}
                          route:
                            {
                              cluster: file-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match:
                            {
                              safe_regex:
                                {
                                  google_re2: {max_program_size: 150},
                                  regex: "\/explore\/.*\/files",
                                },
                            }
                          route:
                            {
                              cluster: explore-service,
                              regex_rewrite:
                                {
                                  pattern:
                                    {
                                      google_re2: {max_program_size: 100},
                                      regex: "\/explore\/",
                                    },
                                  substitution: "/",
                                },
                              timeout: 60s,
                            }
                        - match:
                            {
                              safe_regex:
                                {
                                  google_re2: {max_program_size: 100},
                                  regex: "\/explore\/.*",
                                },
                            }
                          route: {cluster: face-det-service, timeout: 60s}
                        - match: {prefix: "/memories-experts/"}
                          route:
                            {
                              cluster: photo-collection-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match: {prefix: "/account-svc/"}
                          route:
                            {
                              cluster: account-service,
                              prefix_rewrite: "/api/",
                              timeout: 60s,
                            }
                        - match:
                            {
                              path: "/settings-svc/system/appVersions/updateStatus",
                            }
                          route:
                            {
                              cluster: system-settings-service,
                              regex_rewrite:
                                {
                                  pattern:
                                    {
                                      google_re2: {max_program_size: 100},
                                      regex: "settings-svc",
                                    },
                                  substitution: "api",
                                },
                              timeout: 60s,
                            }
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                        - match: {prefix: "/promotions/"}
                          route: {cluster: promos-service, prefix_rewrite: "/"}
                          # typed_per_filter_config:
                          #   envoy.filters.http.lua:
                          #     "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                          #     disabled: true
                        - match: {path: "/.well-known/assetlinks.json"}
                          direct_response:
                            status: 200
                            body:
                              filename: "/etc/static/assetlinks.json"
                        - match: {path: "/health"}
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                          direct_response:
                            status: 200
                            body:
                              inline_string: "I am healthy"
                      cors:
                        allow_origin_string_match:
                          prefix: "https://$APP_UI_SERVICE_HOST"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS, PATCH, HEAD
                        allow_headers: keep-alive, user-agent, cache-control, content-type, X-Requested-With, If-Modified-Since, Authorization, Referer, Accept
                        expose_headers: "x-envoy-upstream-service-time"
                        max_age: "1728000"
                      response_headers_to_add:
                        - header:
                            key: Strict-Transport-Security
                            value: max-age=63072000; includeSubDomains; preload
                          append: true                        
                http_filters:
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: true
                      headers:
                        - name: ":path"
                          exact_match: "/api/system/appVersions/updateStatus"
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        package.path = package.path .. ";/lua/packages/json.lua"
                        json = require "json"

                        function envoy_on_request(request_handle)
                          if pcall(verify_authorization,request_handle) == false then
                              request_handle:respond({
                                [":status"] = "500"
                              }, "Internal Server Error")
                          end    
                        end

                        function verify_authorization(request_handle)
                            request_handle:logDebug("Authority: " .. request_handle:headers():get(":authority"))
                            request_handle:logDebug("Method: " .. request_handle:headers():get(":method"))
                            request_handle:logDebug("Path: " .. request_handle:headers():get(":path"))
                            -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
                            local headers = request_handle:headers()
                            local authHeader = headers:get("authorization")
                            
                            if authHeader == nil then
                                request_handle:logDebug("No Authorization header")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")

                            end

                            local split_table = split(authHeader, " ")
                            request_handle:logDebug("Split return: " .. dump(split))

                            -- lua array index starts at 1 not 0
                            local token = split_table[2]

                            if token == nil then
                                request_handle:logDebug("No Token Value")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            end

                            local requestBody = "token=" .. token;

                            request_handle:logDebug("Request body " .. requestBody)

                            local responseHeaders, responseBody = request_handle:httpCall("auth-internal-service", {
                                [":method"] = "POST",
                                [":path"] = "/oauth2/introspect",
                                [":authority"] = headers:get(":authority"),
                                ["Content-Type"] = "application/x-www-form-urlencoded"
                            }, requestBody, 5000)

                            request_handle:logDebug("Headers recieved : " .. dump(responseHeaders))
                            request_handle:logDebug("Body recieved : " .. dump(responseBody))

                            if responseHeaders[":status"] ~= "200" then
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            end

                            local jsonResponseBody = json.decode(responseBody)

                            if jsonResponseBody.active == false then
                                request_handle:logDebug("Returning 403 on false response")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            else
                                -- adding subject as header  
                                -- TODO: Need to verify client_id
                                request_handle:headers():add("x-minos-accountid", jsonResponseBody.sub)
                            end

                        end

                        -- function to split string
                        function split(inputstr, sep)
                            if sep == nil then
                                sep = "%s"
                            end
                            local t = {}
                            for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
                                table.insert(t, str)
                            end
                            return t
                        end

                        -- function to interate over lua table
                        function dump(o)
                            if type(o) == 'table' then
                                local s = '{ '
                                for k, v in pairs(o) do
                                    if type(k) ~= 'number' then
                                        k = '"' .. k .. '"'
                                    end
                                    s = s .. '[' .. k .. '] = ' .. dump(v) .. ','
                                end
                                return s .. '} '
                            else
                                return tostring(o)
                            end
                        end
                  - name: envoy.filters.http.router
  clusters:
    - name: album-service
      connect_timeout: 2s
      type: logical_dns
      lb_policy: round_robin
      http2_protocol_options: {}
      load_assignment:
        cluster_name: album-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $ALBUM_SERVICE_HOST
                      port_value: $ALBUM_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $ALBUM_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $ALBUM_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: auth-public-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: auth-public-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $AUTH_PUBLIC_SERVICE_HOST
                      port_value: $AUTH_PUBLIC_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $AUTH_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $AUTH_PUBLIC_SERVICE_HOST
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt
    - name: auth-internal-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: auth-internal-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $AUTH_INTERNAL_SERVICE_HOST
                      port_value: $AUTH_INTERNAL_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $AUTH_INTERNAL_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $AUTH_INTERNAL_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: account-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: account-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $ACCOUNT_SERVICE_HOST
                      port_value: $ACCOUNT_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $ACCOUNT_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $ACCOUNT_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: file-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: file-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $FILE_SERVICE_HOST
                      port_value: $FILE_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $FILE_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $FILE_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: image-detection-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: image-detection-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $IMAGE_DETECTION_SERVICE_HOST
                      port_value: $IMAGE_DETECTION_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $IMAGE_DETECTION_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $IMAGE_DETECTION_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: explore-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: explore-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $EXPLORE_SERVICE_HOST
                      port_value: $EXPORE_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $EXPLORE_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $EXPLORE_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: photo-collection-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: photo-collection-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $PHOTO_COLLECTION_SERVICE_HOST
                      port_value: $PHOTO_COLLECTION_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $PHOTO_COLLECTION_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $PHOTO_COLLECTION_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: system-settings-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: system-settings-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $SYSTEM_SETTINGS_SERVICE_HOST
                      port_value: $SYSTEM_SETTINGS_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $SYSTEM_SETTINGS_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $SYSTEM_SETTINGS_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: promos-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: promos-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $PROMOS_SERVICE_HOST
                      port_value: $PROMOS_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $PROMOS_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $PROMOS_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: face-det-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: face-det-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: $FACE_DET_SERVICE_HOST
                      port_value: $FACE_DET_SERVICE_PORT
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: $PROMOS_SERVICE_HOST
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: $FACE_DET_SERVICE_HOST
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001


***** Dumping final config file /etc/envoy/envoy.yaml *****

static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains:
                        # Adding both front proxy and API domains for now
                        ["notforiegnhost"]
                      routes:
                        - match: {prefix: "/album/"}
                          route: {
                              cluster: album-service,
                              prefix_rewrite: "/",
                              # TODO: Reduce time out value
                              timeout: 60s,
                            }
                        - match: {prefix: "/image/"}
                          route:
                            {
                              cluster: image-detection-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match: {prefix: "/file/"}
                          route:
                            {
                              cluster: file-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match:
                            {
                              safe_regex:
                                {
                                  google_re2: {max_program_size: 150},
                                  regex: "\/explore\/.*\/files",
                                },
                            }
                          route:
                            {
                              cluster: explore-service,
                              regex_rewrite:
                                {
                                  pattern:
                                    {
                                      google_re2: {max_program_size: 100},
                                      regex: "\/explore\/",
                                    },
                                  substitution: "/",
                                },
                              timeout: 60s,
                            }
                        - match:
                            {
                              safe_regex:
                                {
                                  google_re2: {max_program_size: 100},
                                  regex: "\/explore\/.*",
                                },
                            }
                          route: {cluster: face-det-service, timeout: 60s}
                        - match: {prefix: "/memories-experts/"}
                          route:
                            {
                              cluster: photo-collection-service,
                              prefix_rewrite: "/",
                              timeout: 60s,
                            }
                        - match: {prefix: "/account-svc/"}
                          route:
                            {
                              cluster: account-service,
                              prefix_rewrite: "/api/",
                              timeout: 60s,
                            }
                        - match:
                            {
                              path: "/settings-svc/system/appVersions/updateStatus",
                            }
                          route:
                            {
                              cluster: system-settings-service,
                              regex_rewrite:
                                {
                                  pattern:
                                    {
                                      google_re2: {max_program_size: 100},
                                      regex: "settings-svc",
                                    },
                                  substitution: "api",
                                },
                              timeout: 60s,
                            }
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                        - match: {prefix: "/promotions/"}
                          route: {cluster: promos-service, prefix_rewrite: "/"}
                          # typed_per_filter_config:
                          #   envoy.filters.http.lua:
                          #     "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                          #     disabled: true
                        - match: {path: "/.well-known/assetlinks.json"}
                          direct_response:
                            status: 200
                            body:
                              filename: "/etc/static/assetlinks.json"
                        - match: {path: "/health"}
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                          direct_response:
                            status: 200
                            body:
                              inline_string: "I am healthy"
                      cors:
                        allow_origin_string_match:
                          prefix: "https://notforiegnhostapp"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS, PATCH, HEAD
                        allow_headers: keep-alive, user-agent, cache-control, content-type, X-Requested-With, If-Modified-Since, Authorization, Referer, Accept
                        expose_headers: "x-envoy-upstream-service-time"
                        max_age: "1728000"
                      response_headers_to_add:
                        - header:
                            key: Strict-Transport-Security
                            value: max-age=63072000; includeSubDomains; preload
                          append: true                        
                http_filters:
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: true
                      headers:
                        - name: ":path"
                          exact_match: "/api/system/appVersions/updateStatus"
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        package.path = package.path .. ";/lua/packages/json.lua"
                        json = require "json"

                        function envoy_on_request(request_handle)
                          if pcall(verify_authorization,request_handle) == false then
                              request_handle:respond({
                                [":status"] = "500"
                              }, "Internal Server Error")
                          end    
                        end

                        function verify_authorization(request_handle)
                            request_handle:logDebug("Authority: " .. request_handle:headers():get(":authority"))
                            request_handle:logDebug("Method: " .. request_handle:headers():get(":method"))
                            request_handle:logDebug("Path: " .. request_handle:headers():get(":path"))
                            -- Make an HTTP call to an upstream host with the following headers, body, and timeout.
                            local headers = request_handle:headers()
                            local authHeader = headers:get("authorization")
                            
                            if authHeader == nil then
                                request_handle:logDebug("No Authorization header")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")

                            end

                            local split_table = split(authHeader, " ")
                            request_handle:logDebug("Split return: " .. dump(split))

                            -- lua array index starts at 1 not 0
                            local token = split_table[2]

                            if token == nil then
                                request_handle:logDebug("No Token Value")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            end

                            local requestBody = "token=" .. token;

                            request_handle:logDebug("Request body " .. requestBody)

                            local responseHeaders, responseBody = request_handle:httpCall("auth-internal-service", {
                                [":method"] = "POST",
                                [":path"] = "/oauth2/introspect",
                                [":authority"] = headers:get(":authority"),
                                ["Content-Type"] = "application/x-www-form-urlencoded"
                            }, requestBody, 5000)

                            request_handle:logDebug("Headers recieved : " .. dump(responseHeaders))
                            request_handle:logDebug("Body recieved : " .. dump(responseBody))

                            if responseHeaders[":status"] ~= "200" then
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            end

                            local jsonResponseBody = json.decode(responseBody)

                            if jsonResponseBody.active == false then
                                request_handle:logDebug("Returning 403 on false response")
                                request_handle:respond({
                                    [":status"] = "403"
                                }, "NOT ALLOWED")
                            else
                                -- adding subject as header  
                                -- TODO: Need to verify client_id
                                request_handle:headers():add("x-minos-accountid", jsonResponseBody.sub)
                            end

                        end

                        -- function to split string
                        function split(inputstr, sep)
                            if sep == nil then
                                sep = "%s"
                            end
                            local t = {}
                            for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
                                table.insert(t, str)
                            end
                            return t
                        end

                        -- function to interate over lua table
                        function dump(o)
                            if type(o) == 'table' then
                                local s = '{ '
                                for k, v in pairs(o) do
                                    if type(k) ~= 'number' then
                                        k = '"' .. k .. '"'
                                    end
                                    s = s .. '[' .. k .. '] = ' .. dump(v) .. ','
                                end
                                return s .. '} '
                            else
                                return tostring(o)
                            end
                        end
                  - name: envoy.filters.http.router
  clusters:
    - name: album-service
      connect_timeout: 2s
      type: logical_dns
      lb_policy: round_robin
      http2_protocol_options: {}
      load_assignment:
        cluster_name: album-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: album-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: album-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: album-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: auth-public-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: auth-public-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: auth-svc.photos-sqa.jpnmob-acyan-npr.asurionpa.com
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: 
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: auth-svc.photos-sqa.jpnmob-acyan-npr.asurionpa.com
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt
    - name: auth-internal-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: auth-internal-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: auth-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: auth-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: auth-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: account-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: account-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: account-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: account-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: account-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: file-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: file-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: file-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: file-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: file-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: image-detection-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: image-detection-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: imagedetection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: imagedetection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: imagedetection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: explore-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: explore-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: explore-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: explore-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: explore-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: photo-collection-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: photo-collection-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: photo-collection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: photo-collection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: photo-collection-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: system-settings-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: system-settings-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: system-setting.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: system-setting.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: system-setting.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: promos-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: promos-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: promos-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: promos-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: promos-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
    - name: face-det-service
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: face-det-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: facedet-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: promos-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
          common_tls_context:
            validation_context:
              match_subject_alt_names:
                # This needs to be same as the SAN entry in the certificate
                - exact: facedet-svc.photos-sqa.jpnmob-acyan.npr.aws.asurion.net
              trusted_ca:
                filename: /etc/asurion/cert/asurion-ca.crt
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
